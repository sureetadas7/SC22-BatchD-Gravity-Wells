{"backend_state":"running","connection_file":"/projects/e07d40f5-5cfc-4265-a995-712ecb653936/.local/share/jupyter/runtime/kernel-641ab9ec-252c-4e91-ab0c-119286bf104e.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"DS_Merged_Data_Exploration.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1660669714399,"exec_count":29,"id":"dbe502","input":"import numpy as np\nimport pandas as pd","kernel":"ds_env","metadata":{"id":"ahcMjdz61hGq"},"pos":4,"start":1660669714380,"state":"done","type":"cell"}
{"cell_type":"code","end":1660669724973,"exec_count":30,"id":"c8d8d0","input":"import plotly.express as px #importing plotly","kernel":"ds_env","pos":9,"start":1660669724958,"state":"done","type":"cell"}
{"cell_type":"code","end":1660670003254,"exec_count":36,"id":"0e43eb","input":"df = pd.read_csv('../datasets/heart_fixed.csv')","kernel":"ds_env","pos":6,"start":1660670002629,"state":"done","type":"cell"}
{"cell_type":"code","end":1660670010627,"exec_count":37,"id":"e268e3","input":"df.plot.scatter(x=\"HeartDisease\",y= \"Stroke\")","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:xlabel='HeartDisease', ylabel='Stroke'>"},"exec_count":37},"1":{"data":{"image/png":"d9a679c7b7f1ca1ca582b7bf0cb9877ae347fb71","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":10,"scrolled":true,"start":1660670009693,"state":"done","type":"cell"}
{"cell_type":"code","end":1660670022314,"exec_count":38,"id":"ac626e","input":"fig = px.violin(df, x='PhysicalHealth', y='MentalHealth', box=True)\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"b111fd7b8dd0e0032bc7483629646e5c7e59982d"}}},"pos":13,"start":1660670020338,"state":"done","type":"cell"}
{"cell_type":"code","end":1660670064939,"exec_count":39,"id":"ac47d7","input":"df.hist(column='MentalHealth') # '30.0','0.0','30.0','0.0','30.0'\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([[<AxesSubplot:title={'center':'MentalHealth'}>]], dtype=object)"},"exec_count":39},"1":{"data":{"image/png":"a01adeb6529c30c71f4a1cd0c3c614f3e26f8f41","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":14,"start":1660670064683,"state":"done","type":"cell"}
{"cell_type":"code","end":1660670073480,"exec_count":40,"id":"a4ab05","input":"df.plot.scatter(x=\"PhysicalHealth\",y= \"MentalHealth\")","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:xlabel='PhysicalHealth', ylabel='MentalHealth'>"},"exec_count":40},"1":{"data":{"image/png":"256466855c3e4d541e46f34cbb5a679a1d955b13","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":15,"scrolled":false,"start":1660670072669,"state":"done","type":"cell"}
{"cell_type":"code","end":1660670275238,"exec_count":42,"id":"b5aa17","input":"plt.figure(figsize=(16,12))\nsns.heatmap(data=gdp_data.iloc[:,:].corr(),annot=True,fmt='.2f',cmap='coolwarm')\nplt.show()","kernel":"ds_env","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":859},"id":"GH6QFOg2_qgZ","outputId":"1c634609-8653-427c-9bde-09f54445d47a"},"output":{"0":{"ename":"NameError","evalue":"name 'plt' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [42]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m16\u001b[39m,\u001b[38;5;241m12\u001b[39m))\n\u001b[1;32m      2\u001b[0m sns\u001b[38;5;241m.\u001b[39mheatmap(data\u001b[38;5;241m=\u001b[39mgdp_data\u001b[38;5;241m.\u001b[39miloc[:,:]\u001b[38;5;241m.\u001b[39mcorr(),annot\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,fmt\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;124m'\u001b[39m,cmap\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcoolwarm\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n","\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"]}},"pos":78,"start":1660670275211,"state":"done","type":"cell"}
{"cell_type":"code","end":1660670444425,"exec_count":43,"id":"649c10","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","kernel":"ds_env","metadata":{"id":"N95b4GvK8rLY"},"pos":60,"start":1660670443988,"state":"done","type":"cell"}
{"cell_type":"code","end":1660670450762,"exec_count":44,"id":"997e7b","input":"plt.figure(figsize=(16,12))\nsns.heatmap(data=df.corr(),annot=True,fmt='.2f',cmap='coolwarm')\nplt.show()","kernel":"ds_env","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":859},"id":"cWmp5PXU-DdN","outputId":"39683209-b66d-4e4c-f663-fb2214b0370c"},"output":{"0":{"data":{"image/png":"61a7e4fb6e4600b5a8aae21af86d724c85dc2db5","text/plain":"<Figure size 1152x864 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":69,"start":1660670450449,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"03c6cb","input":"old_names = ['Antigua & Barbuda', 'Bahamas, The', 'Bosnia & Herzegovina', 'Central African Rep.', 'Congo, Dem. Rep.', 'Swaziland', 'Gambia, The', 'Cote d\\'Ivoire',\n             'Micronesia, Fed. St.', 'Burma', 'Korea, North', 'Macedonia', 'Congo, Repub. of the', 'Saint Kitts & Nevis', 'Sao Tome & Principe',\n             'Korea, South', 'East Timor', 'Trinidad & Tobago']\n\nnew_names = ['Antigua and Barbuda', 'Bahamas', 'Bosnia and Herzegovina', 'Central African Republic', 'DR Congo', 'Eswatini', 'Gambia', 'Ivory Coast', 'Micronesia',\n             'Myanmar', 'North Korea', 'North Macedonia', 'Republic of the Congo', 'Saint Kitts and Nevis', 'Sao Tome and Principe', 'South Korea',\n             'Timor-Leste', 'Trinidad and Tobago']\n\nfor i in range(len(old_names)):\n  country_data['Country'].replace({old_names[i]: new_names[i]}, inplace=True)\n","metadata":{"id":"N8RWcR9L5dDA"},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"135239","input":"height_data = pd.read_csv('../content/sample_data/Height of Male and Female by Country 2022.csv')\ncountry_data = pd.read_csv('../content/sample_data/countries of the world.csv', decimal=',')\nmerged_df = merge_data(country_data, height_data)","metadata":{"id":"M7mvuoXM6ogD"},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3c6ffc","input":"","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4ee5d9","input":"country_data['Country'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0oYtxAs74qiF","outputId":"fe6fb05e-d448-4bb1-87dd-a2b46a581fda"},"output":{"0":{"data":{"text/plain":"array(['Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra',\n       'Angola', 'Anguilla', 'Antigua & Barbuda', 'Argentina', 'Armenia',\n       'Aruba', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas, The',\n       'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium',\n       'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia',\n       'Bosnia & Herzegovina', 'Botswana', 'Brazil', 'British Virgin Is.',\n       'Brunei', 'Bulgaria', 'Burkina Faso', 'Burma', 'Burundi',\n       'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands',\n       'Central African Rep.', 'Chad', 'Chile', 'China', 'Colombia',\n       'Comoros', 'Congo, Dem. Rep.', 'Congo, Repub. of the',\n       'Cook Islands', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia', 'Cuba',\n       'Cyprus', 'Czech Republic', 'Denmark', 'Djibouti', 'Dominica',\n       'Dominican Republic', 'East Timor', 'Ecuador', 'Egypt',\n       'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia',\n       'Ethiopia', 'Faroe Islands', 'Fiji', 'Finland', 'France',\n       'French Guiana', 'French Polynesia', 'Gabon', 'Gambia, The',\n       'Gaza Strip', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece',\n       'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala',\n       'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti',\n       'Honduras', 'Hong Kong', 'Hungary', 'Iceland', 'India',\n       'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel',\n       'Italy', 'Jamaica', 'Japan', 'Jersey', 'Jordan', 'Kazakhstan',\n       'Kenya', 'Kiribati', 'Korea, North', 'Korea, South', 'Kuwait',\n       'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia',\n       'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Macau',\n       'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives',\n       'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania',\n       'Mauritius', 'Mayotte', 'Mexico', 'Micronesia, Fed. St.',\n       'Moldova', 'Monaco', 'Mongolia', 'Montserrat', 'Morocco',\n       'Mozambique', 'Namibia', 'Nauru', 'Nepal', 'Netherlands',\n       'Netherlands Antilles', 'New Caledonia', 'New Zealand',\n       'Nicaragua', 'Niger', 'Nigeria', 'N. Mariana Islands', 'Norway',\n       'Oman', 'Pakistan', 'Palau', 'Panama', 'Papua New Guinea',\n       'Paraguay', 'Peru', 'Philippines', 'Poland', 'Portugal',\n       'Puerto Rico', 'Qatar', 'Reunion', 'Romania', 'Russia', 'Rwanda',\n       'Saint Helena', 'Saint Kitts & Nevis', 'Saint Lucia',\n       'St Pierre & Miquelon', 'Saint Vincent and the Grenadines',\n       'Samoa', 'San Marino', 'Sao Tome & Principe', 'Saudi Arabia',\n       'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore',\n       'Slovakia', 'Slovenia', 'Solomon Islands', 'Somalia',\n       'South Africa', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname',\n       'Swaziland', 'Sweden', 'Switzerland', 'Syria', 'Taiwan',\n       'Tajikistan', 'Tanzania', 'Thailand', 'Togo', 'Tonga',\n       'Trinidad & Tobago', 'Tunisia', 'Turkey', 'Turkmenistan',\n       'Turks & Caicos Is', 'Tuvalu', 'Uganda', 'Ukraine',\n       'United Arab Emirates', 'United Kingdom', 'United States',\n       'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela', 'Vietnam',\n       'Virgin Islands', 'Wallis and Futuna', 'West Bank',\n       'Western Sahara', 'Yemen', 'Zambia', 'Zimbabwe'], dtype=object)"},"exec_count":0,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5d76ba","input":"for name in country_names:\n  if name not in height_names:\n    print(name)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GuRpalNM5B5X","outputId":"9c606327-561c-4d50-d9c4-b9c8f78950b3"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Anguilla\nAntigua & Barbuda\nAruba\nBahamas, The\nBosnia & Herzegovina\nBritish Virgin Is.\nBurma\nCape Verde\nCayman Islands\nCentral African Rep.\nCongo, Dem. Rep.\nCongo, Repub. of the\nCote d'Ivoire\nEast Timor\nFaroe Islands\nFrench Guiana\nGambia, The\nGaza Strip\nGibraltar\nGuadeloupe\nGuam\nGuernsey\nIsle of Man\nJersey\nKorea, North\nKorea, South\nLiechtenstein\nMacau\nMacedonia\nMartinique\nMayotte\nMicronesia, Fed. St.\nMonaco\nMontserrat\nN. Mariana Islands\nNetherlands Antilles\nNew Caledonia\nReunion\nSaint Helena\nSaint Kitts & Nevis\nSan Marino\nSao Tome & Principe\nSt Pierre & Miquelon\nSwaziland\nTrinidad & Tobago\nTurks & Caicos Is\nVirgin Islands\nWallis and Futuna\nWest Bank\nWestern Sahara\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6d88c3","input":"# FUNCTIONS FROM SECTION 1\ndef merge_data(country_data, height_data):\n  height_data = height_data.rename(columns={\"Country Name\" : \"Country\"})\n  country_data['Country'] = country_data.apply(lambda row : row.astype(str)['Country'][:-1], axis=1)\n  old_names = ['Antigua & Barbuda', 'Bahamas, The', 'Bosnia & Herzegovina', 'Central African Rep.', 'Congo, Dem. Rep.', 'Swaziland', 'Gambia, The', 'Cote d\\'Ivoire',\n             'Micronesia, Fed. St.', 'Burma', 'Korea, North', 'Macedonia', 'Congo, Repub. of the', 'Saint Kitts & Nevis', 'Sao Tome & Principe',\n             'Korea, South', 'East Timor', 'Trinidad & Tobago']\n\n  new_names = ['Antigua and Barbuda', 'Bahamas', 'Bosnia and Herzegovina', 'Central African Republic', 'DR Congo', 'Eswatini', 'Gambia', 'Ivory Coast', 'Micronesia',\n              'Myanmar', 'North Korea', 'North Macedonia', 'Republic of the Congo', 'Saint Kitts and Nevis', 'Sao Tome and Principe', 'South Korea',\n              'Timor-Leste', 'Trinidad and Tobago']\n\n  for i in range(len(old_names)):\n    country_data['Country'].replace({old_names[i]: new_names[i]}, inplace=True)\n  \n  merged_df = pd.merge(country_data, height_data, on=['Country'])\n  return merged_df\n\n\n\n# FUNCTIONS FROM SECTION 2\ndef rename_regions(row):\n  if row['Region'] == 'ASIA (EX. NEAR EAST)':\n    region = 'ASIA'\n  elif row['Region'] == 'NEAR EAST':\n    region = 'MIDDLE EAST'\n  elif row['Region'] == 'C.W. OF IND. STATES':\n    region = \"C.W.I. STATES\"\n  else:\n    region = row['Region']\n  return region\n\ndef format_and_clean_data(merged_data):\n\n  merged_data['Region'] = merged_data.apply(lambda row : row.astype(str)['Region'].strip(), axis=1)\n  merged_data['Region'] = merged_data.apply(lambda row : rename_regions(row), axis=1)\n\n  for col in merged_data.columns.values:\n    # if there aren't any null values in this col, skip it\n    if merged_data[col].isnull().sum() == 0:\n        continue\n    # if the col is climate, get the mode, or most common value, and use it as the guessed values\n    if col == 'Climate':\n        guess_values = merged_data.groupby('Region')['Climate'].apply(lambda x: x.mode())\n    else:\n    # in all other cases, get the median, or average, of the column grouped by the region\n        guess_values = merged_data.groupby('Region')[col].median()\n    # for each region in the data set, go through and find all of the null values and set them to the median for that region\n    for region in merged_data['Region'].unique():\n        merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n\n  return merged_data\n\n\n\n# FUNCTIONS FROM SECTION 3\ndef get_gdp_dataset(merged_data):\n  merged_data = merged_data.drop(['Male Height in Cm', 'Female Height in Cm'], axis=1)\n  merged_data['Average Height in Ft'] = merged_data['Female Height in Ft'] / 2 + merged_data['Male Height in Ft'] / 2\n  merged_data = merged_data.drop(['Male Height in Ft', 'Female Height in Ft'], axis=1)\n\n  GDP_features = ['GDP ($ per capita)', 'Infant mortality (per 1000 births)', 'Net migration', 'Pop. Density (per sq. mi.)',\n                'Literacy (%)', 'Phones (per 1000)', 'Birthrate', 'Agriculture', 'Industry', 'Service']\n  gdp_data = merged_data[GDP_features]\n  \n  return gdp_data","metadata":{"id":"B3LPfbwzAtq8"},"pos":85,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"812afc","input":"country_names = country_data['Country'].unique()\ncountry_names.sort()\nheight_names = height_data['Country'].unique()\nheight_names.sort()\nfor name in height_names:\n  if name not in country_names:\n    print(name)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tnRQ9UX54qbr","outputId":"694732dc-a5de-4f97-a382-505fe4d43ac3"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Antigua and Barbuda\nBahamas\nBosnia and Herzegovina\nCentral African Republic\nDR Congo\nEswatini\nGambia\nIvory Coast\nMicronesia\nMontenegro\nMyanmar\nNiue\nNorth Korea\nNorth Macedonia\nPalestine\nRepublic of the Congo\nSaint Kitts and Nevis\nSao Tome and Principe\nSouth Korea\nTimor-Leste\nTokelau\nTrinidad and Tobago\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"81e051","input":"country_names = country_data['Country'].unique()\ncountry_names.sort()\nheight_names = height_data['Country'].unique()\nheight_names.sort()\nfor name in height_names:\n  if name not in country_names:\n    print(name)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5i6GPDoY6Uzo","outputId":"c82f632d-ab99-46ff-cbf7-5104b5aafe14"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Montenegro\nNiue\nPalestine\nTokelau\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"848d62","input":"merged_df.info()","metadata":{"id":"OlNxCwf76i-j"},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"88d15e","input":"merged_df['Region'].unique()","metadata":{"id":"--DZIrIr6jba"},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"93d0f2","input":"merged_df = pd.merge(country_data, height_data, on=['Country'])\nmerged_df.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":473},"id":"CsNoQdVb6V1Z","outputId":"67755271-1a9d-4daa-d66c-71c02d9a3859"},"output":{"0":{"data":{"text/html":"\n  <div id=\"df-d4377598-a733-4a58-95d3-b77b1a389eab\">\n    <div class=\"colab-df-container\">\n      <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Region</th>\n      <th>Population</th>\n      <th>Area (sq. mi.)</th>\n      <th>Pop. Density (per sq. mi.)</th>\n      <th>Coastline (coast/area ratio)</th>\n      <th>Net migration</th>\n      <th>Infant mortality (per 1000 births)</th>\n      <th>GDP ($ per capita)</th>\n      <th>Literacy (%)</th>\n      <th>...</th>\n      <th>Birthrate</th>\n      <th>Deathrate</th>\n      <th>Agriculture</th>\n      <th>Industry</th>\n      <th>Service</th>\n      <th>Rank</th>\n      <th>Male Height in Cm</th>\n      <th>Female Height in Cm</th>\n      <th>Male Height in Ft</th>\n      <th>Female Height in Ft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>ASIA (EX. NEAR EAST)</td>\n      <td>31056997</td>\n      <td>647500</td>\n      <td>48.0</td>\n      <td>0.00</td>\n      <td>23.06</td>\n      <td>163.07</td>\n      <td>700.0</td>\n      <td>36.0</td>\n      <td>...</td>\n      <td>46.60</td>\n      <td>20.34</td>\n      <td>0.380</td>\n      <td>0.240</td>\n      <td>0.380</td>\n      <td>157</td>\n      <td>168.50</td>\n      <td>156.11</td>\n      <td>5.53</td>\n      <td>5.12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Albania</td>\n      <td>EASTERN EUROPE</td>\n      <td>3581655</td>\n      <td>28748</td>\n      <td>124.6</td>\n      <td>1.26</td>\n      <td>-4.93</td>\n      <td>21.52</td>\n      <td>4500.0</td>\n      <td>86.5</td>\n      <td>...</td>\n      <td>15.11</td>\n      <td>5.22</td>\n      <td>0.232</td>\n      <td>0.188</td>\n      <td>0.579</td>\n      <td>90</td>\n      <td>174.07</td>\n      <td>162.23</td>\n      <td>5.71</td>\n      <td>5.32</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Algeria</td>\n      <td>NORTHERN AFRICA</td>\n      <td>32930091</td>\n      <td>2381740</td>\n      <td>13.8</td>\n      <td>0.04</td>\n      <td>-0.39</td>\n      <td>31.00</td>\n      <td>6000.0</td>\n      <td>70.0</td>\n      <td>...</td>\n      <td>17.14</td>\n      <td>4.61</td>\n      <td>0.101</td>\n      <td>0.600</td>\n      <td>0.298</td>\n      <td>71</td>\n      <td>175.04</td>\n      <td>162.35</td>\n      <td>5.74</td>\n      <td>5.33</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>American Samoa</td>\n      <td>OCEANIA</td>\n      <td>57794</td>\n      <td>199</td>\n      <td>290.4</td>\n      <td>58.29</td>\n      <td>-20.71</td>\n      <td>9.27</td>\n      <td>8000.0</td>\n      <td>97.0</td>\n      <td>...</td>\n      <td>22.46</td>\n      <td>3.27</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>44</td>\n      <td>177.09</td>\n      <td>167.55</td>\n      <td>5.81</td>\n      <td>5.50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Andorra</td>\n      <td>WESTERN EUROPE</td>\n      <td>71201</td>\n      <td>468</td>\n      <td>152.1</td>\n      <td>0.00</td>\n      <td>6.60</td>\n      <td>4.05</td>\n      <td>19000.0</td>\n      <td>100.0</td>\n      <td>...</td>\n      <td>8.71</td>\n      <td>6.25</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>27</td>\n      <td>178.84</td>\n      <td>165.53</td>\n      <td>5.87</td>\n      <td>5.43</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>\n      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4377598-a733-4a58-95d3-b77b1a389eab')\"\n              title=\"Convert this dataframe to an interactive table.\"\n              style=\"display:none;\">\n        \n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n       width=\"24px\">\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n  </svg>\n      </button>\n      \n  <style>\n    .colab-df-container {\n      display:flex;\n      flex-wrap:wrap;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n      <script>\n        const buttonEl =\n          document.querySelector('#df-d4377598-a733-4a58-95d3-b77b1a389eab button.colab-df-convert');\n        buttonEl.style.display =\n          google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n        async function convertToInteractive(key) {\n          const element = document.querySelector('#df-d4377598-a733-4a58-95d3-b77b1a389eab');\n          const dataTable =\n            await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                     [key], {});\n          if (!dataTable) return;\n\n          const docLinkHtml = 'Like what you see? Visit the ' +\n            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n            + ' to learn more about interactive tables.';\n          element.innerHTML = '';\n          dataTable['output_type'] = 'display_data';\n          await google.colab.output.renderOutput(dataTable, element);\n          const docLink = document.createElement('div');\n          docLink.innerHTML = docLinkHtml;\n          element.appendChild(docLink);\n        }\n      </script>\n    </div>\n  </div>\n  ","text/plain":"          Country                               Region  Population  \\\n0     Afghanistan        ASIA (EX. NEAR EAST)             31056997   \n1         Albania  EASTERN EUROPE                          3581655   \n2         Algeria  NORTHERN AFRICA                        32930091   \n3  American Samoa  OCEANIA                                   57794   \n4         Andorra  WESTERN EUROPE                            71201   \n\n   Area (sq. mi.)  Pop. Density (per sq. mi.)  Coastline (coast/area ratio)  \\\n0          647500                        48.0                          0.00   \n1           28748                       124.6                          1.26   \n2         2381740                        13.8                          0.04   \n3             199                       290.4                         58.29   \n4             468                       152.1                          0.00   \n\n   Net migration  Infant mortality (per 1000 births)  GDP ($ per capita)  \\\n0          23.06                              163.07               700.0   \n1          -4.93                               21.52              4500.0   \n2          -0.39                               31.00              6000.0   \n3         -20.71                                9.27              8000.0   \n4           6.60                                4.05             19000.0   \n\n   Literacy (%)  ...  Birthrate  Deathrate  Agriculture  Industry  Service  \\\n0          36.0  ...      46.60      20.34        0.380     0.240    0.380   \n1          86.5  ...      15.11       5.22        0.232     0.188    0.579   \n2          70.0  ...      17.14       4.61        0.101     0.600    0.298   \n3          97.0  ...      22.46       3.27          NaN       NaN      NaN   \n4         100.0  ...       8.71       6.25          NaN       NaN      NaN   \n\n   Rank  Male Height in Cm  Female Height in Cm  Male Height in Ft  \\\n0   157             168.50               156.11               5.53   \n1    90             174.07               162.23               5.71   \n2    71             175.04               162.35               5.74   \n3    44             177.09               167.55               5.81   \n4    27             178.84               165.53               5.87   \n\n   Female Height in Ft  \n0                 5.12  \n1                 5.32  \n2                 5.33  \n3                 5.50  \n4                 5.43  \n\n[5 rows x 25 columns]"},"exec_count":0,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"976a91","input":"country_data['Country'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RwsIgKNx4fE_","outputId":"b81cfcd6-d0e0-4156-ac68-039bd052d4e3"},"output":{"0":{"data":{"text/plain":"array(['Afghanistan ', 'Albania ', 'Algeria ', 'American Samoa ',\n       'Andorra ', 'Angola ', 'Anguilla ', 'Antigua & Barbuda ',\n       'Argentina ', 'Armenia ', 'Aruba ', 'Australia ', 'Austria ',\n       'Azerbaijan ', 'Bahamas, The ', 'Bahrain ', 'Bangladesh ',\n       'Barbados ', 'Belarus ', 'Belgium ', 'Belize ', 'Benin ',\n       'Bermuda ', 'Bhutan ', 'Bolivia ', 'Bosnia & Herzegovina ',\n       'Botswana ', 'Brazil ', 'British Virgin Is. ', 'Brunei ',\n       'Bulgaria ', 'Burkina Faso ', 'Burma ', 'Burundi ', 'Cambodia ',\n       'Cameroon ', 'Canada ', 'Cape Verde ', 'Cayman Islands ',\n       'Central African Rep. ', 'Chad ', 'Chile ', 'China ', 'Colombia ',\n       'Comoros ', 'Congo, Dem. Rep. ', 'Congo, Repub. of the ',\n       'Cook Islands ', 'Costa Rica ', \"Cote d'Ivoire \", 'Croatia ',\n       'Cuba ', 'Cyprus ', 'Czech Republic ', 'Denmark ', 'Djibouti ',\n       'Dominica ', 'Dominican Republic ', 'East Timor ', 'Ecuador ',\n       'Egypt ', 'El Salvador ', 'Equatorial Guinea ', 'Eritrea ',\n       'Estonia ', 'Ethiopia ', 'Faroe Islands ', 'Fiji ', 'Finland ',\n       'France ', 'French Guiana ', 'French Polynesia ', 'Gabon ',\n       'Gambia, The ', 'Gaza Strip ', 'Georgia ', 'Germany ', 'Ghana ',\n       'Gibraltar ', 'Greece ', 'Greenland ', 'Grenada ', 'Guadeloupe ',\n       'Guam ', 'Guatemala ', 'Guernsey ', 'Guinea ', 'Guinea-Bissau ',\n       'Guyana ', 'Haiti ', 'Honduras ', 'Hong Kong ', 'Hungary ',\n       'Iceland ', 'India ', 'Indonesia ', 'Iran ', 'Iraq ', 'Ireland ',\n       'Isle of Man ', 'Israel ', 'Italy ', 'Jamaica ', 'Japan ',\n       'Jersey ', 'Jordan ', 'Kazakhstan ', 'Kenya ', 'Kiribati ',\n       'Korea, North ', 'Korea, South ', 'Kuwait ', 'Kyrgyzstan ',\n       'Laos ', 'Latvia ', 'Lebanon ', 'Lesotho ', 'Liberia ', 'Libya ',\n       'Liechtenstein ', 'Lithuania ', 'Luxembourg ', 'Macau ',\n       'Macedonia ', 'Madagascar ', 'Malawi ', 'Malaysia ', 'Maldives ',\n       'Mali ', 'Malta ', 'Marshall Islands ', 'Martinique ',\n       'Mauritania ', 'Mauritius ', 'Mayotte ', 'Mexico ',\n       'Micronesia, Fed. St. ', 'Moldova ', 'Monaco ', 'Mongolia ',\n       'Montserrat ', 'Morocco ', 'Mozambique ', 'Namibia ', 'Nauru ',\n       'Nepal ', 'Netherlands ', 'Netherlands Antilles ',\n       'New Caledonia ', 'New Zealand ', 'Nicaragua ', 'Niger ',\n       'Nigeria ', 'N. Mariana Islands ', 'Norway ', 'Oman ', 'Pakistan ',\n       'Palau ', 'Panama ', 'Papua New Guinea ', 'Paraguay ', 'Peru ',\n       'Philippines ', 'Poland ', 'Portugal ', 'Puerto Rico ', 'Qatar ',\n       'Reunion ', 'Romania ', 'Russia ', 'Rwanda ', 'Saint Helena ',\n       'Saint Kitts & Nevis ', 'Saint Lucia ', 'St Pierre & Miquelon ',\n       'Saint Vincent and the Grenadines ', 'Samoa ', 'San Marino ',\n       'Sao Tome & Principe ', 'Saudi Arabia ', 'Senegal ', 'Serbia ',\n       'Seychelles ', 'Sierra Leone ', 'Singapore ', 'Slovakia ',\n       'Slovenia ', 'Solomon Islands ', 'Somalia ', 'South Africa ',\n       'Spain ', 'Sri Lanka ', 'Sudan ', 'Suriname ', 'Swaziland ',\n       'Sweden ', 'Switzerland ', 'Syria ', 'Taiwan ', 'Tajikistan ',\n       'Tanzania ', 'Thailand ', 'Togo ', 'Tonga ', 'Trinidad & Tobago ',\n       'Tunisia ', 'Turkey ', 'Turkmenistan ', 'Turks & Caicos Is ',\n       'Tuvalu ', 'Uganda ', 'Ukraine ', 'United Arab Emirates ',\n       'United Kingdom ', 'United States ', 'Uruguay ', 'Uzbekistan ',\n       'Vanuatu ', 'Venezuela ', 'Vietnam ', 'Virgin Islands ',\n       'Wallis and Futuna ', 'West Bank ', 'Western Sahara ', 'Yemen ',\n       'Zambia ', 'Zimbabwe '], dtype=object)"},"exec_count":0,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9cb72a","input":"df('Stroke')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DPtZVUAv35qO","outputId":"c9a153b2-46cb-41f7-d7f3-9797e28aba82"},"output":{"0":{"data":{"text/plain":"array(['Netherlands', 'Montenegro', 'Estonia', 'Bosnia and Herzegovina',\n       'Iceland', 'Denmark', 'Czech Republic', 'Latvia', 'Slovakia',\n       'Slovenia', 'Ukraine', 'Croatia', 'Serbia', 'Lithuania', 'Poland',\n       'Finland', 'Norway', 'Sweden', 'Germany', 'Dominica', 'Bermuda',\n       'Puerto Rico', 'Greece', 'Belgium', 'Ireland', 'Lebanon',\n       'Andorra', 'Antigua and Barbuda', 'Australia', 'Canada',\n       'Switzerland', 'Grenada', 'Belarus', 'France', 'Austria',\n       'Luxembourg', 'Cook Islands', 'French Polynesia', 'United Kingdom',\n       'Romania', 'New Zealand', 'Saint Vincent and the Grenadines',\n       'Niue', 'American Samoa', 'Barbados', 'Jamaica', 'United States',\n       'Tunisia', 'Russia', 'Hungary', 'Saint Lucia', 'North Macedonia',\n       'Libya', 'Turkey', 'Morocco', 'Senegal', 'Spain', 'Tokelau',\n       'Trinidad and Tobago', 'Israel', 'Georgia', 'Seychelles', 'Brazil',\n       'China', 'Iran', 'Moldova', 'South Korea', 'Kazakhstan', 'Tonga',\n       'Palestine', 'Algeria', 'Mali', 'Kuwait', 'Jordan', 'Hong Kong',\n       'Argentina', 'North Korea', 'Dominican Republic', 'Egypt',\n       'Suriname', 'Italy', 'Samoa', 'Bahamas', 'Malta', 'Turkmenistan',\n       'Portugal', 'Uruguay', 'Bulgaria', 'United Arab Emirates',\n       'Albania', 'Costa Rica', 'Azerbaijan', 'Fiji', 'Greenland',\n       'Paraguay', 'Iraq', 'Saint Kitts and Nevis', 'Armenia', 'Cuba',\n       'Venezuela', 'Taiwan', 'Singapore', 'Qatar', 'Botswana',\n       'Mauritius', 'Chile', 'Bahrain', 'Cyprus', 'Haiti', 'Guyana',\n       'Cameroon', 'Sudan', 'Japan', 'Burkina Faso', 'Colombia', 'Chad',\n       'Oman', 'Kyrgyzstan', 'Syria', 'Thailand', 'Nigeria', 'Tuvalu',\n       'Republic of the Congo', 'Somalia', 'Uzbekistan', 'Djibouti',\n       'Guinea', 'Zimbabwe', 'Mongolia', 'El Salvador', 'Saudi Arabia',\n       'Palau', 'Eritrea', 'Belize', 'Gabon', 'Kenya',\n       'Sao Tome and Principe', 'Ghana', 'Mexico', 'Niger', 'Panama',\n       'Togo', 'Kiribati', 'Nicaragua', 'Namibia', 'South Africa',\n       'Honduras', 'Micronesia', 'Nauru', 'Eswatini', 'Malaysia',\n       'Central African Republic', 'Vietnam', 'Ethiopia', 'Uganda',\n       'DR Congo', 'Afghanistan', 'Angola', 'Benin', 'Tajikistan',\n       'Gambia', 'Vanuatu', 'Ivory Coast', 'Equatorial Guinea',\n       'Guinea-Bissau', 'Bolivia', 'Sri Lanka', 'Lesotho', 'Maldives',\n       'Comoros', 'Zambia', 'Burundi', 'Pakistan', 'Ecuador', 'Bhutan',\n       'Tanzania', 'Peru', 'Myanmar', 'India', 'Sierra Leone', 'Brunei',\n       'Indonesia', 'Rwanda', 'Malawi', 'Mauritania', 'Liberia',\n       'Cambodia', 'Marshall Islands', 'Philippines', 'Madagascar',\n       'Bangladesh', 'Yemen', 'Nepal', 'Guatemala', 'Mozambique',\n       'Papua New Guinea', 'Solomon Islands', 'Laos', 'Timor-Leste'],\n      dtype=object)"},"exec_count":0,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b70ab6","input":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","metadata":{"id":"Dp2oCNZdAsuV"},"pos":84,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c7030f","input":"country_data['Country'] = country_data.apply(lambda row : row.astype(str)['Country'][:-1], axis=1)","metadata":{"id":"OHFCnlXX4iJb"},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"d48055","input":"plt.figure(figsize=(16,12))\nsns.heatmap(data=df.corr[:,:].corr(),annot=True,fmt='.2f',cmap='coolwarm')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":859},"id":"d9Wz6RRW_fBO","outputId":"5e7226f1-a751-40a7-92b6-17c4d3e07109"},"output":{"0":{"ename":"TypeError","evalue":"'method' object is not subscriptable","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [14]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m16\u001b[39m,\u001b[38;5;241m12\u001b[39m))\n\u001b[0;32m----> 2\u001b[0m sns\u001b[38;5;241m.\u001b[39mheatmap(data\u001b[38;5;241m=\u001b[39m\u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcorr\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m:\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241m.\u001b[39mcorr(),annot\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,fmt\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;124m'\u001b[39m,cmap\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcoolwarm\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n","\u001b[0;31mTypeError\u001b[0m: 'method' object is not subscriptable"]},"1":{"data":{"text/plain":"<Figure size 1152x864 with 0 Axes>"},"exec_count":14,"output_type":"execute_result"}},"pos":73,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"b240de","input":"df.columns.values","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g-V3rFsb9wqS","outputId":"484d817d-3115-4d8c-f588-afc03ca46d22"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 319795 entries, 0 to 319794\nData columns (total 18 columns):\n #   Column            Non-Null Count   Dtype \n---  ------            --------------   ----- \n 0   HeartDisease      319795 non-null  object\n 1   BMI               319795 non-null  object\n 2   Smoking           319795 non-null  object\n 3   AlcoholDrinking   319795 non-null  object\n 4   Stroke            319795 non-null  object\n 5   PhysicalHealth    319795 non-null  object\n 6   MentalHealth      319795 non-null  object\n 7   DiffWalking       319795 non-null  object\n 8   Sex               319795 non-null  object\n 9   AgeCategory       319795 non-null  object\n 10  Race              319795 non-null  object\n 11  Diabetic          319795 non-null  object\n 12  PhysicalActivity  319795 non-null  object\n 13  GenHealth         319795 non-null  object\n 14  SleepTime         319795 non-null  object\n 15  Asthma            319795 non-null  object\n 16  KidneyDisease     319795 non-null  object\n 17  SkinCancer        319795 non-null  object\ndtypes: object(18)\nmemory usage: 43.9+ MB\n"}},"pos":66,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"ff36c5","input":"def merge_data(country_data, height_data):\n  height_data = height_data.rename(columns={\"Country Name\" : \"Country\"})\n  country_data['Country'] = country_data.apply(lambda row : row.astype(str)['Country'][:-1], axis=1)\n  old_names = ['Antigua & Barbuda', 'Bahamas, The', 'Bosnia & Herzegovina', 'Central African Rep.', 'Congo, Dem. Rep.', 'Swaziland', 'Gambia, The', 'Cote d\\'Ivoire',\n             'Micronesia, Fed. St.', 'Burma', 'Korea, North', 'Macedonia', 'Congo, Repub. of the', 'Saint Kitts & Nevis', 'Sao Tome & Principe',\n             'Korea, South', 'East Timor', 'Trinidad & Tobago']\n\n  new_names = ['Antigua and Barbuda', 'Bahamas', 'Bosnia and Herzegovina', 'Central African Republic', 'DR Congo', 'Eswatini', 'Gambia', 'Ivory Coast', 'Micronesia',\n              'Myanmar', 'North Korea', 'North Macedonia', 'Republic of the Congo', 'Saint Kitts and Nevis', 'Sao Tome and Principe', 'South Korea',\n              'Timor-Leste', 'Trinidad and Tobago']\n\n  for i in range(len(old_names)):\n    country_data['Country'].replace({old_names[i]: new_names[i]}, inplace=True)\n  \n  merged_df = pd.merge(country_data, height_data, on=['Country'])\n  return merged_df","metadata":{"id":"asMRjau16oCF"},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"86185a","input":"import numpy as np\nimport pandas as pd\n","metadata":{"id":"JkJxqO-S7o5N"},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"652fd4","input":"height_data = pd.read_csv('../content/sample_data/Height of Male and Female by Country 2022.csv')\ncountry_data = pd.read_csv('../content/sample_data/countries of the world.csv', decimal=',')\nmerged_data = merge_data(country_data, height_data)\n\nmerged_data['Region'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bh7iWFLH7j6l","outputId":"a6a7f62a-9104-45f4-db13-5544243974d3"},"output":{"0":{"data":{"text/plain":"array(['ASIA (EX. NEAR EAST)         ',\n       'EASTERN EUROPE                     ',\n       'NORTHERN AFRICA                    ',\n       'OCEANIA                            ',\n       'WESTERN EUROPE                     ',\n       'SUB-SAHARAN AFRICA                 ', 'LATIN AMER. & CARIB    ',\n       'C.W. OF IND. STATES ', 'NEAR EAST                          ',\n       'NORTHERN AMERICA                   ',\n       'BALTICS                            '], dtype=object)"},"exec_count":24,"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"59c120","input":"df['Diabetic'] = df['Diabetic'].apply(lambda x : x[0:2]","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qJc59_eK7kQ3","outputId":"a0f544da-efb8-4e36-f43a-e19b833b6892"},"output":{"0":{"data":{"text/plain":"array(['ASIA (EX. NEAR EAST)', 'EASTERN EUROPE', 'NORTHERN AFRICA',\n       'OCEANIA', 'WESTERN EUROPE', 'SUB-SAHARAN AFRICA',\n       'LATIN AMER. & CARIB', 'C.W. OF IND. STATES', 'NEAR EAST',\n       'NORTHERN AMERICA', 'BALTICS'], dtype=object)"},"exec_count":25,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"40d662","input":"def rename_regions(row):\n  if row['Region'] == 'ASIA (EX. NEAR EAST)':\n    region = 'ASIA'\n  elif row['Region'] == 'NEAR EAST':\n    region = 'MIDDLE EAST'\n  elif row['Region'] == 'C.W. OF IND. STATES':\n    region = \"C.W.I. STATES\"\n  else:\n    region = row['Region']\n  return region","metadata":{"id":"4YLyEpTN7kON"},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"99daa7","input":"merged_data['Region'] = merged_data.apply(lambda row : rename_regions(row), axis=1)\nmerged_data['Region'].unique()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lf9b5NNN7zJa","outputId":"18af34be-b4cd-4734-916b-3779acd6559e"},"output":{"0":{"data":{"text/plain":"array(['ASIA', 'EASTERN EUROPE', 'NORTHERN AFRICA', 'OCEANIA',\n       'WESTERN EUROPE', 'SUB-SAHARAN AFRICA', 'LATIN AMER. & CARIB',\n       'C.W.I. STATES', 'MIDDLE EAST', 'NORTHERN AMERICA', 'BALTICS'],\n      dtype=object)"},"exec_count":27,"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"f8fa33","input":"merged_data.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"07eDae_p7zBH","outputId":"3612d2b0-6444-41a0-96bd-605d59991d99"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 195 entries, 0 to 194\nData columns (total 25 columns):\n #   Column                              Non-Null Count  Dtype  \n---  ------                              --------------  -----  \n 0   Country                             195 non-null    object \n 1   Region                              195 non-null    object \n 2   Population                          195 non-null    int64  \n 3   Area (sq. mi.)                      195 non-null    int64  \n 4   Pop. Density (per sq. mi.)          195 non-null    float64\n 5   Coastline (coast/area ratio)        195 non-null    float64\n 6   Net migration                       194 non-null    float64\n 7   Infant mortality (per 1000 births)  194 non-null    float64\n 8   GDP ($ per capita)                  195 non-null    float64\n 9   Literacy (%)                        187 non-null    float64\n 10  Phones (per 1000)                   193 non-null    float64\n 11  Arable (%)                          195 non-null    float64\n 12  Crops (%)                           195 non-null    float64\n 13  Other (%)                           195 non-null    float64\n 14  Climate                             179 non-null    float64\n 15  Birthrate                           194 non-null    float64\n 16  Deathrate                           193 non-null    float64\n 17  Agriculture                         191 non-null    float64\n 18  Industry                            191 non-null    float64\n 19  Service                             191 non-null    float64\n 20  Rank                                195 non-null    int64  \n 21  Male Height in Cm                   195 non-null    float64\n 22  Female Height in Cm                 195 non-null    float64\n 23  Male Height in Ft                   195 non-null    float64\n 24  Female Height in Ft                 195 non-null    float64\ndtypes: float64(20), int64(3), object(2)\nmemory usage: 39.6+ KB\n"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"00cd4d","input":"for col in merged_data.columns.values:\n    # if there aren't any null values in this col, skip it\n    if merged_data[col].isnull().sum() == 0:\n        continue\n    # if the col is climate, get the mode, or most common value, and use it as the guessed values\n    if col == 'Climate':\n        guess_values = merged_data.groupby('Region')['Climate'].apply(lambda x: x.mode())\n    else:\n    # in all other cases, get the median, or average, of the column grouped by the region\n        guess_values = merged_data.groupby('Region')[col].median()\n    # for each region in the data set, go through and find all of the null values and set them to the median for that region\n    for region in merged_data['Region'].unique():\n        merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XIQkxUEY732l","outputId":"239ca089-e76a-4d5e-fc80-eb4f9f478e02"},"output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  self._setitem_single_block(indexer, value, name)\n"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"a975f0","input":"merged_data.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U55Sbdrj75JE","outputId":"952d45f0-67b2-499a-d555-6ff5bd1b2edd"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 195 entries, 0 to 194\nData columns (total 25 columns):\n #   Column                              Non-Null Count  Dtype  \n---  ------                              --------------  -----  \n 0   Country                             195 non-null    object \n 1   Region                              195 non-null    object \n 2   Population                          195 non-null    int64  \n 3   Area (sq. mi.)                      195 non-null    int64  \n 4   Pop. Density (per sq. mi.)          195 non-null    float64\n 5   Coastline (coast/area ratio)        195 non-null    float64\n 6   Net migration                       195 non-null    float64\n 7   Infant mortality (per 1000 births)  195 non-null    float64\n 8   GDP ($ per capita)                  195 non-null    float64\n 9   Literacy (%)                        195 non-null    float64\n 10  Phones (per 1000)                   195 non-null    float64\n 11  Arable (%)                          195 non-null    float64\n 12  Crops (%)                           195 non-null    float64\n 13  Other (%)                           195 non-null    float64\n 14  Climate                             179 non-null    float64\n 15  Birthrate                           195 non-null    float64\n 16  Deathrate                           195 non-null    float64\n 17  Agriculture                         195 non-null    float64\n 18  Industry                            195 non-null    float64\n 19  Service                             195 non-null    float64\n 20  Rank                                195 non-null    int64  \n 21  Male Height in Cm                   195 non-null    float64\n 22  Female Height in Cm                 195 non-null    float64\n 23  Male Height in Ft                   195 non-null    float64\n 24  Female Height in Ft                 195 non-null    float64\ndtypes: float64(20), int64(3), object(2)\nmemory usage: 39.6+ KB\n"}},"pos":54,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"234236","input":"def rename_regions(row):\n  if row['Region'] == 'ASIA (EX. NEAR EAST)':\n    region = 'ASIA'\n  elif row['Region'] == 'NEAR EAST':\n    region = 'MIDDLE EAST'\n  elif row['Region'] == 'C.W. OF IND. STATES':\n    region = \"C.W.I. STATES\"\n  else:\n    region = row['Region']\n  return region\n\ndef format_and_clean_data(merged_data):\n\n  merged_data['Region'] = merged_data.apply(lambda row : row.astype(str)['Region'].strip(), axis=1)\n  merged_data['Region'] = merged_data.apply(lambda row : rename_regions(row), axis=1)\n\n  for col in merged_data.columns.values:\n    # if there aren't any null values in this col, skip it\n    if merged_data[col].isnull().sum() == 0:\n        continue\n    # if the col is climate, get the mode, or most common value, and use it as the guessed values\n    if col == 'Climate':\n        guess_values = merged_data.groupby('Region')['Climate'].apply(lambda x: x.mode())\n    else:\n    # in all other cases, get the median, or average, of the column grouped by the region\n        guess_values = merged_data.groupby('Region')[col].median()\n    # for each region in the data set, go through and find all of the null values and set them to the median for that region\n    for region in merged_data['Region'].unique():\n        merged_data[col].loc[(merged_data[col].isnull())&(merged_data['Region']==region)] = guess_values[region]\n\n  return merged_data","metadata":{"id":"wDwmIgFl75GZ"},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"809656","input":"height_data = pd.read_csv('../content/sample_data/Height of Male and Female by Country 2022.csv')\ncountry_data = pd.read_csv('../content/sample_data/countries of the world.csv', decimal=',')\n\ndf = df(country_data, height_data)\nmerged_data = format_and_clean_data(merged_data)\nmerged_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"EKVOtwWu9i8F","outputId":"e8e37fc1-54c8-46b3-b18f-bd4e0361fc27"},"output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  self._setitem_single_block(indexer, value, name)\n"},"1":{"data":{"text/html":"\n  <div id=\"df-ef610693-9e8d-4b86-ac63-1963f5e5adb4\">\n    <div class=\"colab-df-container\">\n      <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Region</th>\n      <th>Population</th>\n      <th>Area (sq. mi.)</th>\n      <th>Pop. Density (per sq. mi.)</th>\n      <th>Coastline (coast/area ratio)</th>\n      <th>Net migration</th>\n      <th>Infant mortality (per 1000 births)</th>\n      <th>GDP ($ per capita)</th>\n      <th>Literacy (%)</th>\n      <th>...</th>\n      <th>Birthrate</th>\n      <th>Deathrate</th>\n      <th>Agriculture</th>\n      <th>Industry</th>\n      <th>Service</th>\n      <th>Rank</th>\n      <th>Male Height in Cm</th>\n      <th>Female Height in Cm</th>\n      <th>Male Height in Ft</th>\n      <th>Female Height in Ft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>ASIA</td>\n      <td>31056997</td>\n      <td>647500</td>\n      <td>48.0</td>\n      <td>0.00</td>\n      <td>23.06</td>\n      <td>163.07</td>\n      <td>700.0</td>\n      <td>36.0</td>\n      <td>...</td>\n      <td>46.60</td>\n      <td>20.34</td>\n      <td>0.380</td>\n      <td>0.240</td>\n      <td>0.380</td>\n      <td>157</td>\n      <td>168.50</td>\n      <td>156.11</td>\n      <td>5.53</td>\n      <td>5.12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Albania</td>\n      <td>EASTERN EUROPE</td>\n      <td>3581655</td>\n      <td>28748</td>\n      <td>124.6</td>\n      <td>1.26</td>\n      <td>-4.93</td>\n      <td>21.52</td>\n      <td>4500.0</td>\n      <td>86.5</td>\n      <td>...</td>\n      <td>15.11</td>\n      <td>5.22</td>\n      <td>0.232</td>\n      <td>0.188</td>\n      <td>0.579</td>\n      <td>90</td>\n      <td>174.07</td>\n      <td>162.23</td>\n      <td>5.71</td>\n      <td>5.32</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Algeria</td>\n      <td>NORTHERN AFRICA</td>\n      <td>32930091</td>\n      <td>2381740</td>\n      <td>13.8</td>\n      <td>0.04</td>\n      <td>-0.39</td>\n      <td>31.00</td>\n      <td>6000.0</td>\n      <td>70.0</td>\n      <td>...</td>\n      <td>17.14</td>\n      <td>4.61</td>\n      <td>0.101</td>\n      <td>0.600</td>\n      <td>0.298</td>\n      <td>71</td>\n      <td>175.04</td>\n      <td>162.35</td>\n      <td>5.74</td>\n      <td>5.33</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>American Samoa</td>\n      <td>OCEANIA</td>\n      <td>57794</td>\n      <td>199</td>\n      <td>290.4</td>\n      <td>58.29</td>\n      <td>-20.71</td>\n      <td>9.27</td>\n      <td>8000.0</td>\n      <td>97.0</td>\n      <td>...</td>\n      <td>22.46</td>\n      <td>3.27</td>\n      <td>0.151</td>\n      <td>0.190</td>\n      <td>0.620</td>\n      <td>44</td>\n      <td>177.09</td>\n      <td>167.55</td>\n      <td>5.81</td>\n      <td>5.50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Andorra</td>\n      <td>WESTERN EUROPE</td>\n      <td>71201</td>\n      <td>468</td>\n      <td>152.1</td>\n      <td>0.00</td>\n      <td>6.60</td>\n      <td>4.05</td>\n      <td>19000.0</td>\n      <td>100.0</td>\n      <td>...</td>\n      <td>8.71</td>\n      <td>6.25</td>\n      <td>0.021</td>\n      <td>0.274</td>\n      <td>0.707</td>\n      <td>27</td>\n      <td>178.84</td>\n      <td>165.53</td>\n      <td>5.87</td>\n      <td>5.43</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>\n      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef610693-9e8d-4b86-ac63-1963f5e5adb4')\"\n              title=\"Convert this dataframe to an interactive table.\"\n              style=\"display:none;\">\n        \n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n       width=\"24px\">\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n  </svg>\n      </button>\n      \n  <style>\n    .colab-df-container {\n      display:flex;\n      flex-wrap:wrap;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n      <script>\n        const buttonEl =\n          document.querySelector('#df-ef610693-9e8d-4b86-ac63-1963f5e5adb4 button.colab-df-convert');\n        buttonEl.style.display =\n          google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n        async function convertToInteractive(key) {\n          const element = document.querySelector('#df-ef610693-9e8d-4b86-ac63-1963f5e5adb4');\n          const dataTable =\n            await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                     [key], {});\n          if (!dataTable) return;\n\n          const docLinkHtml = 'Like what you see? Visit the ' +\n            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n            + ' to learn more about interactive tables.';\n          element.innerHTML = '';\n          dataTable['output_type'] = 'display_data';\n          await google.colab.output.renderOutput(dataTable, element);\n          const docLink = document.createElement('div');\n          docLink.innerHTML = docLinkHtml;\n          element.appendChild(docLink);\n        }\n      </script>\n    </div>\n  </div>\n  ","text/plain":"          Country           Region  Population  Area (sq. mi.)  \\\n0     Afghanistan             ASIA    31056997          647500   \n1         Albania   EASTERN EUROPE     3581655           28748   \n2         Algeria  NORTHERN AFRICA    32930091         2381740   \n3  American Samoa          OCEANIA       57794             199   \n4         Andorra   WESTERN EUROPE       71201             468   \n\n   Pop. Density (per sq. mi.)  Coastline (coast/area ratio)  Net migration  \\\n0                        48.0                          0.00          23.06   \n1                       124.6                          1.26          -4.93   \n2                        13.8                          0.04          -0.39   \n3                       290.4                         58.29         -20.71   \n4                       152.1                          0.00           6.60   \n\n   Infant mortality (per 1000 births)  GDP ($ per capita)  Literacy (%)  ...  \\\n0                              163.07               700.0          36.0  ...   \n1                               21.52              4500.0          86.5  ...   \n2                               31.00              6000.0          70.0  ...   \n3                                9.27              8000.0          97.0  ...   \n4                                4.05             19000.0         100.0  ...   \n\n   Birthrate  Deathrate  Agriculture  Industry  Service  Rank  \\\n0      46.60      20.34        0.380     0.240    0.380   157   \n1      15.11       5.22        0.232     0.188    0.579    90   \n2      17.14       4.61        0.101     0.600    0.298    71   \n3      22.46       3.27        0.151     0.190    0.620    44   \n4       8.71       6.25        0.021     0.274    0.707    27   \n\n   Male Height in Cm  Female Height in Cm  Male Height in Ft  \\\n0             168.50               156.11               5.53   \n1             174.07               162.23               5.71   \n2             175.04               162.35               5.74   \n3             177.09               167.55               5.81   \n4             178.84               165.53               5.87   \n\n   Female Height in Ft  \n0                 5.12  \n1                 5.32  \n2                 5.33  \n3                 5.50  \n4                 5.43  \n\n[5 rows x 25 columns]"},"exec_count":32,"output_type":"execute_result"}},"pos":62,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"d21dba","input":"merged_data = merged_data.drop(['Male Height in Cm', 'Female Height in Cm'], axis=1)\nmerged_data['Average Height in Ft'] = merged_data['Female Height in Ft'] / 2 + merged_data['Male Height in Ft'] / 2\nmerged_data = merged_data.drop(['Male Height in Ft', 'Female Height in Ft'], axis=1)\n\nmerged_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":401},"id":"cE6CqEdr-G_k","outputId":"0253161b-d7df-4d68-c1d7-a5697b391932"},"output":{"0":{"data":{"text/html":"\n  <div id=\"df-b65f11bf-b440-4d10-84d1-2a68863be585\">\n    <div class=\"colab-df-container\">\n      <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Region</th>\n      <th>Population</th>\n      <th>Area (sq. mi.)</th>\n      <th>Pop. Density (per sq. mi.)</th>\n      <th>Coastline (coast/area ratio)</th>\n      <th>Net migration</th>\n      <th>Infant mortality (per 1000 births)</th>\n      <th>GDP ($ per capita)</th>\n      <th>Literacy (%)</th>\n      <th>...</th>\n      <th>Crops (%)</th>\n      <th>Other (%)</th>\n      <th>Climate</th>\n      <th>Birthrate</th>\n      <th>Deathrate</th>\n      <th>Agriculture</th>\n      <th>Industry</th>\n      <th>Service</th>\n      <th>Rank</th>\n      <th>Average Height in Ft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>ASIA</td>\n      <td>31056997</td>\n      <td>647500</td>\n      <td>48.0</td>\n      <td>0.00</td>\n      <td>23.06</td>\n      <td>163.07</td>\n      <td>700.0</td>\n      <td>36.0</td>\n      <td>...</td>\n      <td>0.22</td>\n      <td>87.65</td>\n      <td>1.0</td>\n      <td>46.60</td>\n      <td>20.34</td>\n      <td>0.380</td>\n      <td>0.240</td>\n      <td>0.380</td>\n      <td>157</td>\n      <td>5.325</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Albania</td>\n      <td>EASTERN EUROPE</td>\n      <td>3581655</td>\n      <td>28748</td>\n      <td>124.6</td>\n      <td>1.26</td>\n      <td>-4.93</td>\n      <td>21.52</td>\n      <td>4500.0</td>\n      <td>86.5</td>\n      <td>...</td>\n      <td>4.42</td>\n      <td>74.49</td>\n      <td>3.0</td>\n      <td>15.11</td>\n      <td>5.22</td>\n      <td>0.232</td>\n      <td>0.188</td>\n      <td>0.579</td>\n      <td>90</td>\n      <td>5.515</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Algeria</td>\n      <td>NORTHERN AFRICA</td>\n      <td>32930091</td>\n      <td>2381740</td>\n      <td>13.8</td>\n      <td>0.04</td>\n      <td>-0.39</td>\n      <td>31.00</td>\n      <td>6000.0</td>\n      <td>70.0</td>\n      <td>...</td>\n      <td>0.25</td>\n      <td>96.53</td>\n      <td>1.0</td>\n      <td>17.14</td>\n      <td>4.61</td>\n      <td>0.101</td>\n      <td>0.600</td>\n      <td>0.298</td>\n      <td>71</td>\n      <td>5.535</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>American Samoa</td>\n      <td>OCEANIA</td>\n      <td>57794</td>\n      <td>199</td>\n      <td>290.4</td>\n      <td>58.29</td>\n      <td>-20.71</td>\n      <td>9.27</td>\n      <td>8000.0</td>\n      <td>97.0</td>\n      <td>...</td>\n      <td>15.00</td>\n      <td>75.00</td>\n      <td>2.0</td>\n      <td>22.46</td>\n      <td>3.27</td>\n      <td>0.151</td>\n      <td>0.190</td>\n      <td>0.620</td>\n      <td>44</td>\n      <td>5.655</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Andorra</td>\n      <td>WESTERN EUROPE</td>\n      <td>71201</td>\n      <td>468</td>\n      <td>152.1</td>\n      <td>0.00</td>\n      <td>6.60</td>\n      <td>4.05</td>\n      <td>19000.0</td>\n      <td>100.0</td>\n      <td>...</td>\n      <td>0.00</td>\n      <td>97.78</td>\n      <td>3.0</td>\n      <td>8.71</td>\n      <td>6.25</td>\n      <td>0.021</td>\n      <td>0.274</td>\n      <td>0.707</td>\n      <td>27</td>\n      <td>5.650</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>\n      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b65f11bf-b440-4d10-84d1-2a68863be585')\"\n              title=\"Convert this dataframe to an interactive table.\"\n              style=\"display:none;\">\n        \n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n       width=\"24px\">\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n  </svg>\n      </button>\n      \n  <style>\n    .colab-df-container {\n      display:flex;\n      flex-wrap:wrap;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n      <script>\n        const buttonEl =\n          document.querySelector('#df-b65f11bf-b440-4d10-84d1-2a68863be585 button.colab-df-convert');\n        buttonEl.style.display =\n          google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n        async function convertToInteractive(key) {\n          const element = document.querySelector('#df-b65f11bf-b440-4d10-84d1-2a68863be585');\n          const dataTable =\n            await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                     [key], {});\n          if (!dataTable) return;\n\n          const docLinkHtml = 'Like what you see? Visit the ' +\n            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n            + ' to learn more about interactive tables.';\n          element.innerHTML = '';\n          dataTable['output_type'] = 'display_data';\n          await google.colab.output.renderOutput(dataTable, element);\n          const docLink = document.createElement('div');\n          docLink.innerHTML = docLinkHtml;\n          element.appendChild(docLink);\n        }\n      </script>\n    </div>\n  </div>\n  ","text/plain":"          Country           Region  Population  Area (sq. mi.)  \\\n0     Afghanistan             ASIA    31056997          647500   \n1         Albania   EASTERN EUROPE     3581655           28748   \n2         Algeria  NORTHERN AFRICA    32930091         2381740   \n3  American Samoa          OCEANIA       57794             199   \n4         Andorra   WESTERN EUROPE       71201             468   \n\n   Pop. Density (per sq. mi.)  Coastline (coast/area ratio)  Net migration  \\\n0                        48.0                          0.00          23.06   \n1                       124.6                          1.26          -4.93   \n2                        13.8                          0.04          -0.39   \n3                       290.4                         58.29         -20.71   \n4                       152.1                          0.00           6.60   \n\n   Infant mortality (per 1000 births)  GDP ($ per capita)  Literacy (%)  ...  \\\n0                              163.07               700.0          36.0  ...   \n1                               21.52              4500.0          86.5  ...   \n2                               31.00              6000.0          70.0  ...   \n3                                9.27              8000.0          97.0  ...   \n4                                4.05             19000.0         100.0  ...   \n\n   Crops (%)  Other (%)  Climate  Birthrate  Deathrate  Agriculture  Industry  \\\n0       0.22      87.65      1.0      46.60      20.34        0.380     0.240   \n1       4.42      74.49      3.0      15.11       5.22        0.232     0.188   \n2       0.25      96.53      1.0      17.14       4.61        0.101     0.600   \n3      15.00      75.00      2.0      22.46       3.27        0.151     0.190   \n4       0.00      97.78      3.0       8.71       6.25        0.021     0.274   \n\n   Service  Rank  Average Height in Ft  \n0    0.380   157                 5.325  \n1    0.579    90                 5.515  \n2    0.298    71                 5.535  \n3    0.620    44                 5.655  \n4    0.707    27                 5.650  \n\n[5 rows x 22 columns]"},"exec_count":35,"output_type":"execute_result"}},"pos":71,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"e6f696","input":"","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"V_TGMclo0kaz","outputId":"52f8df62-920e-4676-fca4-072ef86614a7"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HeartDisease</th>\n      <th>BMI</th>\n      <th>Smoking</th>\n      <th>AlcoholDrinking</th>\n      <th>Stroke</th>\n      <th>PhysicalHealth</th>\n      <th>MentalHealth</th>\n      <th>DiffWalking</th>\n      <th>Sex</th>\n      <th>AgeCategory</th>\n      <th>Race</th>\n      <th>Diabetic</th>\n      <th>PhysicalActivity</th>\n      <th>GenHealth</th>\n      <th>SleepTime</th>\n      <th>Asthma</th>\n      <th>KidneyDisease</th>\n      <th>SkinCancer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>No</td>\n      <td>16.6</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>3.0</td>\n      <td>30.0</td>\n      <td>No</td>\n      <td>Female</td>\n      <td>55-59</td>\n      <td>White</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Very good</td>\n      <td>5.0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>No</td>\n      <td>20.34</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>No</td>\n      <td>Female</td>\n      <td>80 or older</td>\n      <td>White</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Very good</td>\n      <td>7.0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No</td>\n      <td>26.58</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>20.0</td>\n      <td>30.0</td>\n      <td>No</td>\n      <td>Male</td>\n      <td>65-69</td>\n      <td>White</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Fair</td>\n      <td>8.0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>No</td>\n      <td>24.21</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>No</td>\n      <td>Female</td>\n      <td>75-79</td>\n      <td>White</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Good</td>\n      <td>6.0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>No</td>\n      <td>23.71</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>28.0</td>\n      <td>0.0</td>\n      <td>Yes</td>\n      <td>Female</td>\n      <td>40-44</td>\n      <td>White</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Very good</td>\n      <td>8.0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  HeartDisease    BMI Smoking AlcoholDrinking Stroke PhysicalHealth  \\\n0           No   16.6     Yes              No     No            3.0   \n1           No  20.34      No              No    Yes            0.0   \n2           No  26.58     Yes              No     No           20.0   \n3           No  24.21      No              No     No            0.0   \n4           No  23.71      No              No     No           28.0   \n\n  MentalHealth DiffWalking     Sex  AgeCategory   Race Diabetic  \\\n0         30.0          No  Female        55-59  White      Yes   \n1          0.0          No  Female  80 or older  White       No   \n2         30.0          No    Male        65-69  White      Yes   \n3          0.0          No  Female        75-79  White       No   \n4          0.0         Yes  Female        40-44  White       No   \n\n  PhysicalActivity  GenHealth SleepTime Asthma KidneyDisease SkinCancer  \n0              Yes  Very good       5.0    Yes            No        Yes  \n1              Yes  Very good       7.0     No            No         No  \n2              Yes       Fair       8.0    Yes            No         No  \n3               No       Good       6.0     No            No        Yes  \n4              Yes  Very good       8.0     No            No         No  "},"exec_count":36,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"67b9a6","input":"GDP_features = ['GDP ($ per capita)', 'Infant mortality (per 1000 births)', 'Net migration', 'Pop. Density (per sq. mi.)',\n                'Literacy (%)', 'Phones (per 1000)', 'Birthrate', 'Agriculture', 'Industry', 'Service']\ngdp_data = merged_data[GDP_features]\nheight_features = ['Average Height in Ft', 'Agriculture', 'Service', 'Phones (per 1000)', 'GDP ($ per capita)', 'Literacy (%)']\navg_height_data = merged_data[height_features]","metadata":{"id":"73dEr1l__oTo"},"pos":76,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"a9063e","input":"fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(16,16))\nplt.subplots_adjust(hspace=0.4)\n\ncorr_to_gdp = pd.Series(dtype='float64')\nfor col in gdp_data.columns.values:\n  if not col == 'GDP ($ per capita)':\n    corr_to_gdp[col] = gdp_data['GDP ($ per capita)'].corr(gdp_data[col])\nabs_corr_to_gdp = corr_to_gdp.abs().sort_values(ascending=False)\ncorr_to_gdp = corr_to_gdp.loc[abs_corr_to_gdp.index]\n\n\nfor i in range(3):\n    for j in range(3):\n        sns.regplot(x=corr_to_gdp.index.values[i*3+j], y='GDP ($ per capita)', data=gdp_data,\n                   ax=axes[i,j], fit_reg=False, marker='.')\n        title = 'correlation='+str(corr_to_gdp[i*3+j])\n        axes[i,j].set_title(title)\naxes[1,2].set_xlim(0,102)\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":948},"id":"4nYfQkD8_u-A","outputId":"793e94bd-ff77-49e9-938a-60ae5bf59cb7"},"output":{"0":{"data":{"image/png":"34d121e04feb4191d41b874243b726f994ce3a83","text/plain":"<Figure size 1152x1152 with 9 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":80,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"aa7de0","input":"def get_gdp_dataset(merged_data):\n  merged_data = merged_data.drop(['Male Height in Cm', 'Female Height in Cm'], axis=1)\n  merged_data['Average Height in Ft'] = merged_data['Female Height in Ft'] / 2 + merged_data['Male Height in Ft'] / 2\n  merged_data = merged_data.drop(['Male Height in Ft', 'Female Height in Ft'], axis=1)\n\n  GDP_features = ['GDP ($ per capita)', 'Infant mortality (per 1000 births)', 'Net migration', 'Pop. Density (per sq. mi.)',\n                'Literacy (%)', 'Phones (per 1000)', 'Birthrate', 'Agriculture', 'Industry', 'Service']\n  gdp_data = merged_data[GDP_features]\n  \n  return gdp_data","metadata":{"id":"J8w-jy_IAPQR"},"pos":82,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"d81dfc","input":"df.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZS6sY5zb39mu","outputId":"f7a309f5-327e-4a24-fa47-16030284229e"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 319795 entries, 0 to 319794\nData columns (total 18 columns):\n #   Column            Non-Null Count   Dtype \n---  ------            --------------   ----- \n 0   HeartDisease      319795 non-null  object\n 1   BMI               319795 non-null  object\n 2   Smoking           319795 non-null  object\n 3   AlcoholDrinking   319795 non-null  object\n 4   Stroke            319795 non-null  object\n 5   PhysicalHealth    319795 non-null  object\n 6   MentalHealth      319795 non-null  object\n 7   DiffWalking       319795 non-null  object\n 8   Sex               319795 non-null  object\n 9   AgeCategory       319795 non-null  object\n 10  Race              319795 non-null  object\n 11  Diabetic          319795 non-null  object\n 12  PhysicalActivity  319795 non-null  object\n 13  GenHealth         319795 non-null  object\n 14  SleepTime         319795 non-null  object\n 15  Asthma            319795 non-null  object\n 16  KidneyDisease     319795 non-null  object\n 17  SkinCancer        319795 non-null  object\ndtypes: object(18)\nmemory usage: 43.9+ MB\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"dc2f53","input":"df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 319795 entries, 0 to 319794\nData columns (total 18 columns):\n #   Column            Non-Null Count   Dtype \n---  ------            --------------   ----- \n 0   HeartDisease      319795 non-null  object\n 1   BMI               319795 non-null  object\n 2   Smoking           319795 non-null  object\n 3   AlcoholDrinking   319795 non-null  object\n 4   Stroke            319795 non-null  object\n 5   PhysicalHealth    319795 non-null  object\n 6   MentalHealth      319795 non-null  object\n 7   DiffWalking       319795 non-null  object\n 8   Sex               319795 non-null  object\n 9   AgeCategory       319795 non-null  object\n 10  Race              319795 non-null  object\n 11  Diabetic          319795 non-null  object\n 12  PhysicalActivity  319795 non-null  object\n 13  GenHealth         319795 non-null  object\n 14  SleepTime         319795 non-null  object\n 15  Asthma            319795 non-null  object\n 16  KidneyDisease     319795 non-null  object\n 17  SkinCancer        319795 non-null  object\ndtypes: object(18)\nmemory usage: 43.9+ MB\n"}},"pos":45,"type":"cell"}
{"cell_type":"markdown","id":"03b053","input":"When reading the heatmap, you should know that positive numbers indicate that the two datapoints are strongly positvely correlated meaning that as one datapoint increases, the other usually increases. Negative numbers indicate that the two datapoints are strongly negatively correlated meaning that as one datapoint increases, the other usually decreases. Finally, numbers close to zero indicate that there is little to no correlation between the two datapoints meaning that as one increases, the other is just as likely to increase as it is to decrease.\n\n","metadata":{"id":"iyl4dl6Z990Q"},"pos":67,"type":"cell"}
{"cell_type":"markdown","id":"0c8c3a","input":"First and foremost, we will be using pandas to handel all of our data managment needs. We will see it in action soon enough but just know that if we're dealing directly we data, we'll probably be using this. Next, we will be importing numpy. Numpy is what we will be using for a majority of our math related problems, such as dividing a row of data by a number.\n\n","metadata":{"id":"FBFHOuj-2lXZ"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"135e83","input":"# **Section 4**: All of the functions and imports we need\n\n> Here are all of the modules and functions we used throughout this notebook","metadata":{"id":"b4eAQrhZAd24"},"pos":83,"type":"cell"}
{"cell_type":"markdown","id":"17ef58","input":"Now that our data is ready to go again, its time to analyze it and pick out the most important parts. For most machine learning models, it is very important to reduce the number of unique datapoints we give to it. ","metadata":{"id":"h7ijOdLb9uBb"},"pos":63,"type":"cell"}
{"cell_type":"markdown","id":"1e11a9","input":"You may notice that in the country dataset, there is an extra space after each of the names. This means that none of the names match between the two datasets resulting in our empty merged dataset","metadata":{"id":"_6JV-TBZ4kQL"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"1e4e17","input":"In addition to the head() function, we can use the info() function to get a more general overview of the data. Including how many data entries there are, the data type of each column and how many non null values there are.\n\n","metadata":{"id":"dXfz0VKj3--q"},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"1e927d","input":"# **Section 1**: Loading and merging the data\n\n> In this section we will cover:\n*   What imports we will need\n*   How to load a CSV file\n*   How to merge CSV files\n*   How to deal with any merging conflicts you may encounter\n\n\n\n","metadata":{"id":"AFpGnMem14HH"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"21ae75","input":"For this section we will be adding seaborn and pyplot to our list of modules. We will be using seaborn to create a correlation map, or a vizualization of how each column is related to each other column, and for showing a scatter plot of two columns. If you don't understand what either of those things are, thats okay, it will make more sense when you see it in action. We will be using pyplot to show the charts and maps that we make with seaborn.","metadata":{"id":"gtpyzrzr8pEt"},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"244cb3","input":"To understand why we do this, first image that you are acting as the model. Lets say your job is to determine if you should bring an umbrella with you on any given day. Would you rather be given the air pressure, average temerature, wind speed, wind direction, humidity and time of year or would you rather be given the % chance that it will rain? Obviously you'd rather just have the % chance of rain because it gives you all the information you need to know in the least amount of space making it easy for you to make a decision.","metadata":{"id":"25BYyN5E9xyR"},"pos":64,"type":"cell"}
{"cell_type":"markdown","id":"2ef7c6","input":"# **Section 3**: Visualizing the data and PCA\n\n> In this section we will cover:\n*   What imports we will need\n*   how to vizualize the data\n*   How to pick out the data that you want\n*   How to combine columns together to reduce the complexity of the data","metadata":{"id":"EWbNdlDg8UFW"},"pos":57,"type":"cell"}
{"cell_type":"markdown","id":"3420cf","input":"We will be covering what imports we need at the top of each section, however there will be two code blocks at the bottom that include all of the imports and all of the functions that we create throughout our data exploration","metadata":{"id":"NxLbHXRU2Wgv"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"4ad84e","input":"Before you start this setion, create a list of a few different questions that you could answer with the data that we have collected. For example, with the dataset that I've been using, I want to know the best way to figure out if a nation is wealthy or not and I want to know how different factors influce a person's height.","metadata":{"id":"8tCyHF0E8oPo"},"pos":58,"type":"cell"}
{"cell_type":"markdown","id":"4be01c","input":"And we should now see that the country_data data set has country names that match our height_data country names","metadata":{"id":"jnM6IRIs4vad"},"pos":26,"type":"cell"}
{"cell_type":"markdown","id":"4ee036","input":"So now we need to remove the last character from the name of each of our countries in the countries dataset. This may sound like a daunting task, but pandas has a great way to apply a function to every row of a dataset. We will be using two pieces of information to accomplish our goal. First, in python strings can be treated as lists, and as such, we can use index slicing to get all but the last character of the string. You can read more about index slicing here: https://realpython.com/lessons/indexing-and-slicing/. Our second important piece of information is that we can use a lambda to create a function in 1 line that will apply a line of code to each row of our column. you can read more about lambda functions here: https://www.w3schools.com/python/python_lambda.asp.","metadata":{"id":"qyGRk44M4k2N"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"50ecb3","input":"Now we'll go ahead and load up our data. For this, make sure that the text inside of the airquotes is a path to the data that you want to load. Once we have it loaded in, we will use the head() function to get a preview of what the data will look like\n\n","metadata":{"id":"dAOb-36o3NRD"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"566a90","input":"For my data, I simply chose the data points that had a noticable correlation with the data I was interested in. This will certainly lead to problems in the different models due to them only looking at correlation and not causation. For example, average height is correlated with number of phones so our model could reasonably assume that the more phones a person buys, the tallers they will get. This obviously doesn't make sense to us but in more complicated problems it can be easy to include unnecessary data. For examples of this happening in the real world, look at https://www.tylervigen.com/spurious-correlations","metadata":{"id":"bkmsY49s_jce"},"pos":74,"type":"cell"}
{"cell_type":"markdown","id":"5ad9d8","input":"We want to merge the datasets based on the name of the country, but the datasets have different columns for the name of the country, \"Country Name\" and \"Country\". So we rename the height data's column to match the country data's column\n\n","metadata":{"id":"IK_tkB6b3oKT"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"60e7c5","input":"What this means for our datasets is that theres either a different naming convention between the datasets or theres a problem with how we loaded the data, so we're going to output all of the unique values for the country column in both of the datasets","metadata":{"id":"V7xkW3mT4aVT"},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"632a2d","input":"Lets go ahead and turn everything we did into a function that we can take with us into future sections","metadata":{"id":"ePTmTYf86sBr"},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"721950","input":"Now that the data is a bit simpler, we will start to pick out which features we want to use to answer our questions. Lets look at the correlation heatmap again and decide which features we should use to calculate how wealthy a country is and which features to use to calculate the average height of a country.\n\n","metadata":{"id":"jsroWxRm_eWa"},"pos":72,"type":"cell"}
{"cell_type":"markdown","id":"7f569a","input":"\nThe key take aways are that we can apply a function to every row of our dataset with the \"apply\" function, we can create a function in one line using a lambda, and we can cut off the last character of a string with index slicing","metadata":{"id":"7F1Bnf474oc1"},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"8009ef","input":"Some of the names are easy, such as 'Antigua & Barbuda' and 'Antigua and Barbuda', its just an issue of use a '&' instead of the word 'and'. For others, the country names are just in a different order. But some of them are more tricky. After some quick googling, I found that the country_data data set is using outdated names for some of the countries so we will have to fix that as well.","metadata":{"id":"fSk7QeQ15nUW"},"pos":32,"type":"cell"}
{"cell_type":"markdown","id":"8553ce","input":"Now lets combine everything into a single function like we did in the previous notebook so that we can bring it with us to the next one","metadata":{"id":"pbHW_oW68AO5"},"pos":55,"type":"cell"}
{"cell_type":"markdown","id":"899d6e","input":"## Welcome to AI Camp's Data Science curriculum!\n\n> This notebook will cover everything you need to know to open, combine, modify, and vosialize your data. It will be broken up into three major sections. The first section will cover loading the datasets and handling any merging issues that may arrise. The second section will cover how to format the data and fill in any null values that you may have. The third section will cover how to visualize the data and use that visualization to pick out the most important data points to use.\n\n","metadata":{"id":"rqi2WVKN0tcH"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"9d6253","input":"## **Section 2**: Cleaning the data\n\n> In this section we will cover:\n*   What imports we will need\n*   How to rename specific variables in specific rows\n*   What to do about null values","metadata":{"id":"MMtYZZk369-A"},"pos":41,"type":"cell"}
{"cell_type":"markdown","id":"aede1f","input":"We see theres a few null objects in our dataset, namely the climate","metadata":{"id":"t4I-dio98JpB"},"pos":50,"type":"cell"}
{"cell_type":"markdown","id":"bb860b","input":"In order to fill in the missing data. I chose to take the median value of the countries in the region and use them in place of the missing data. The climate is a special case because it is categorical, meaning that it should be a whole number that corresponds to a particular climate.","metadata":{"id":"eS36SoHR8F9V"},"pos":52,"type":"cell"}
{"cell_type":"markdown","id":"c67294","input":"But, in an effort to be thorough, we will use the following loops to figure out if there are any country names that are in one data set but not the other. The first block will show the countries that are in the country_data data set but not the height_data data set and the second block will show what countries are in the height_data data set but not the country_data data set","metadata":{"id":"EUATSbgq5CYl"},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"d064df","input":"Now lets go ahead and plot out each of the GPD values compared to each of the columns we slected above to get a better idea of what the data looks like. We will keep the GDP on the Y-axis and the value we are comparing it to on the X-axis","metadata":{"id":"Jv5CBQ1e_yXk"},"pos":79,"type":"cell"}
{"cell_type":"markdown","id":"d58f80","input":"Uh oh, our merged dataset is empty. An important thing to note about the merge function is that it drops none matching values from the new dataset, or in other words, if it can't find a matching value in both datasets, it drops the whole row.\n\n","metadata":{"id":"iKWZ73qP4ad3"},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"da7951","input":"We'll notice that there's quite a few country names that are unique to each data set so it is our job to figure out why that is and do something to fix it","metadata":{"id":"GpdWniIA5dRK"},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"dcb56c","input":"We want to do the same thing for our models to help them make the best decisions possible. In general, data that is highly correlated can be reduced to a single piece of data. Below are all of the pieces of data that we are keeping track of and a correlation heatmap that we can use the help us decide what should be combined.","metadata":{"id":"XyrRPt-b92cR"},"pos":65,"type":"cell"}
{"cell_type":"markdown","id":"e0c5a6","input":"For now, I'll leave in all of the correlated data points so that we can see how this affects different models down the line. I'll put all of the data that I want to use for my model into its own dataset so that it will be easier to keep track of","metadata":{"id":"Twr-5rVv_mOw"},"pos":75,"type":"cell"}
{"cell_type":"markdown","id":"e40ffc","input":"We will start with a clean data set to avoid any previous sections impacting this one","metadata":{"id":"2sqOg_wU9jh_"},"pos":61,"type":"cell"}
{"cell_type":"markdown","id":"e6a22f","input":"The first and most obvious datapoints that can be combined are Male Height in Cm, Female Height in Cm, Male Height in Ft, and Female Height in Ft because they are highly correlated and we can come up with a clear reason as to why they are correlated. I'll go ahead and drop the Cm measurement and then average the height of males and females into a single value.","metadata":{"id":"ybWF62AC-Hnq"},"pos":70,"type":"cell"}
{"cell_type":"markdown","id":"e8e88b","input":"Now we should see that the data we chose is correlated with the data we are trying to guess, meaning that the data we chose is a good predictor for the data we are trying to guess.","metadata":{"id":"ezkHuHjc_qBC"},"pos":77,"type":"cell"}
{"cell_type":"markdown","id":"ea7d5f","input":"We wont need any new imports from what we had in the last section\n\n","metadata":{"id":"PQQY9V6W7sYE"},"pos":42,"type":"cell"}
{"cell_type":"markdown","id":"fa161f","input":"Lets take a moment to look over the heatmap and keep track of which columns can be combined and come up with a reason for why we think that.\n\n","metadata":{"id":"ApvTy9RG-AGL"},"pos":68,"type":"cell"}
{"cell_type":"markdown","id":"fa7516","input":"Once again, we will be combining everything into functions that we can take with us to later sections and later notebooks","metadata":{"id":"wfuE_104AQTh"},"pos":81,"type":"cell"}
{"end":1660669909703,"exec_count":32,"id":"609edf","input":"import plotly.express as px #importing plotly\ndf.columns.values","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([], dtype=object)"},"exec_count":32}},"pos":11.5,"start":1660669909696,"state":"done","type":"cell"}
{"end":1660670539895,"exec_count":46,"id":"b5968d","input":"df.head()\n","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HeartDisease</th>\n      <th>BMI</th>\n      <th>Smoking</th>\n      <th>AlcoholDrinking</th>\n      <th>Stroke</th>\n      <th>PhysicalHealth</th>\n      <th>MentalHealth</th>\n      <th>DiffWalking</th>\n      <th>Sex</th>\n      <th>AgeCategory</th>\n      <th>Race</th>\n      <th>Diabetic</th>\n      <th>PhysicalActivity</th>\n      <th>GenHealth</th>\n      <th>SleepTime</th>\n      <th>Asthma</th>\n      <th>KidneyDisease</th>\n      <th>SkinCancer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>No</td>\n      <td>16.60</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>3.0</td>\n      <td>30.0</td>\n      <td>No</td>\n      <td>Female</td>\n      <td>55-59</td>\n      <td>White</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Very good</td>\n      <td>5.0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>No</td>\n      <td>20.34</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>No</td>\n      <td>Female</td>\n      <td>80 or older</td>\n      <td>White</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Very good</td>\n      <td>7.0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>No</td>\n      <td>26.58</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>20.0</td>\n      <td>30.0</td>\n      <td>No</td>\n      <td>Male</td>\n      <td>65-69</td>\n      <td>White</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Fair</td>\n      <td>8.0</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>No</td>\n      <td>24.21</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>No</td>\n      <td>Female</td>\n      <td>75-79</td>\n      <td>White</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Good</td>\n      <td>6.0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>No</td>\n      <td>23.71</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>28.0</td>\n      <td>0.0</td>\n      <td>Yes</td>\n      <td>Female</td>\n      <td>40-44</td>\n      <td>White</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Very good</td>\n      <td>8.0</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  HeartDisease    BMI Smoking AlcoholDrinking Stroke  PhysicalHealth  \\\n0           No  16.60     Yes              No     No             3.0   \n1           No  20.34      No              No    Yes             0.0   \n2           No  26.58     Yes              No     No            20.0   \n3           No  24.21      No              No     No             0.0   \n4           No  23.71      No              No     No            28.0   \n\n   MentalHealth DiffWalking     Sex  AgeCategory   Race Diabetic  \\\n0          30.0          No  Female        55-59  White      Yes   \n1           0.0          No  Female  80 or older  White       No   \n2          30.0          No    Male        65-69  White      Yes   \n3           0.0          No  Female        75-79  White       No   \n4           0.0         Yes  Female        40-44  White       No   \n\n  PhysicalActivity  GenHealth  SleepTime Asthma KidneyDisease SkinCancer  \n0              Yes  Very good        5.0    Yes            No        Yes  \n1              Yes  Very good        7.0     No            No         No  \n2              Yes       Fair        8.0    Yes            No         No  \n3               No       Good        6.0     No            No        Yes  \n4              Yes  Very good        8.0     No            No         No  "},"exec_count":46}},"pos":69.75,"start":1660670539762,"state":"done","type":"cell"}
{"end":1660670696023,"exec_count":47,"id":"ef7ae4","input":"df['AgeCategory'].unique()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array(['55-59', '80 or older', '65-69', '75-79', '40-44', '70-74',\n       '60-64', '50-54', '45-49', '18-24', '35-39', '30-34', '25-29'],\n      dtype=object)"},"exec_count":47}},"pos":69.875,"start":1660670695990,"state":"done","type":"cell"}
{"exec_count":45,"id":"2b85b2","input":"df.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 319795 entries, 0 to 319794\nData columns (total 18 columns):\n #   Column            Non-Null Count   Dtype  \n---  ------            --------------   -----  \n 0   HeartDisease      319795 non-null  object \n 1   BMI               319795 non-null  float64\n 2   Smoking           319795 non-null  object \n 3   AlcoholDrinking   319795 non-null  object \n 4   Stroke            319795 non-null  object \n 5   PhysicalHealth    319795 non-null  float64\n 6   MentalHealth      319795 non-null  float64\n 7   DiffWalking       319795 non-null  object \n 8   Sex               319795 non-null  object \n 9   AgeCategory       319795 non-null  object \n 10  Race              319795 non-null  object \n 11  Diabetic          319795 non-null  object \n 12  PhysicalActivity  319795 non-null  object \n 13  GenHealth         319795 non-null  object \n 14  SleepTime         319795 non-null  float64\n 15  Asthma            319795 non-null  object \n 16  KidneyDisease     319795 non-null  object \n 17  SkinCancer        319795 non-null  object \ndtypes: float64(4), object(14)\nmemory usage: 43.9+ MB\n"}},"pos":69.5,"state":"done","type":"cell"}
{"id":"4b155a","input":"","pos":15.5,"type":"cell"}
{"id":0,"time":1660669406078,"type":"user"}
{"last_load":1660667939885,"type":"file"}